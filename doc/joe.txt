Some thoughts about web pages .... and proposal for a system of 
web pages that is composable ... 
-- 
A while back I began thinking how to make web pages behave more like 
regular functions and came up with a few ideas. 
The problem with web pages is that they can't call each other and that 
each HTML file needs a new file. Why can't I stuff all web pages into 
one file. If I have (for example) an abstraction "rounded corner 
boxes" why can't I define it *once* and reuse it several times (well I 
can but I have to drop into javascript) 

Also "what is a web page". A first try at answering this might be "a 
function that returns HTML" but this is not good enough. Let's try 
again "a function which returns HTML *and HEADERS" - better but not 
perfect. 

Try again: "A pure function of an environment which contains headers, etc, 
and returns HTML and a new environment" 

(Note the environment in addition to headers, can contain, for example 
the state of a data base etc - the environment contains the *state* of 
the session) 

At the moment one web page = one HTML file. But this doesn't have to 
be so. 

In what follows I'll outline a syntax and semantics of a system that 
provides composable, side-effect free web pages. I implemented this a 
few years ago but haven't done anything with it - it might be nice to 
relaunch this in a nitrogen context. 

Idea 1) 
Stuff many web pages into one file (call these ".web" files) 
For example: the file myproj.web 
@webpage index(Args) 
    <title>index</title> 
    <h1>I am the index</h1> 
    <p>Go to <a href="page1.html?a=1&b=2">page1</a> 
@webpage page1(Args) 
    <h1>Page 1</h1> 
@webpage page2(Args) 
    ... 
-- end 
This defines three web pages in the same file.  When I reference 
http://site/myproj/index.html I call the Erlang function 
myproj:index(Args) - Args is a data structure containing the HTML 
Headers and command arguments 
Idea 2) 
Web pages can call erlang. 
Example: 
@webpage index(Args) 
   <h1>hello</h1> 
   <? A1 = foo(Args), A2= bar(A1), baz(A2) ?> 
   <p> 
   <? z(A2), ... ?> 
@webpage ... 
The stuff inside <? ... ?> is regular Erlang. 
The bindings A1, ... are carried through the function precisely as in the 
body of an erlang function. 
Semantics: <? E1, E2, ,.. En?> is evaluated. The value of En is pasted 
into the HTML and replaces <? ... ?> 
Idea 3) 
Erlang can call a web page. More tricky this one. 
A web page is a function of type Name x Args -> Headers x HTML. 
(almost, I'll pretend this is true for now, later I'll make a better 
version) 
This needs an example: 
@webpage index(Args) 
   <h1>hello</h1> 
   <? rounded_corner_box("Title", "body") ?> 
@webpage mybox(Args) 
<div class="..." id=<?newid()?> 
<?getArg(title, Args)?> 
... 
@erl 
rounded_corner_box(Title, Body) -> 
   {Headers, HTML} = mybox([{title, T}, {body,B}]), 
   HTML. 
-- end 

Idea 4) Webpages have side effects - update databases etc. 
This is actually a generalisation of the the idea of "headers" 
Wait a bit to see how this is compiled/translated 
---- How is this compiled/translated? 
A .web file is *really* just an Erlang module 
example: foo.web 
@webpage index(Args) 
<h1> .... 
@webpage page1(Args) 
... 
@erl 
foo(A, B) -> 
    ... 
Is compiled into a module foo.erl which exports index/1, page1/1 foo/2 
etc. 
How is this translated? 
Easy - here's an example 
foo.web 
@webpage index(Args) 
<h1>hello</h1> 
<? A1=foo(1,2), B=baz(A1), "hello" ?> 
<p>bar 
@webpage page1(Args) 
... 
@erl 
foo(A, B) -> 
    .. 
Is translated into 
-module(foo). 
-export([index/1]). 
index(Args) -> 
    R1 = <<"<he>hello</h1>">>, 
    A1 = foo(1,1), 
    B = baz(A1), 
    R2 = <<"hello">>, 
    R3 = <<"<p>bar">>, 
    {[], [R1,R2,R3]}. 
page1(Args) -> 
    .... 
Easy :-) (There are better translations, but this way is easy to grok) 
R1, R2, ..are new unused variables containing the "result" 
Haven't we forgotten anything?  - Yes side effects (Headers etc.) 
We add a single pseudo variable which *must* be assigned in 
a <? ... ?> black, called OUT. The translation is like this: 
@webpage foo(Args) 
<h1>hello</h1> 
<? OUT=[lib:add_header("Context-Type/blaaa")], "" ?> 
<p>a 
Translates into 
foo(Args) -> 
   R1 = <<"<h1>hello</h1>">>, 
   Out = [lib:add_header("Context-Type/blaaa")], 
   R2 = <<""">>, 
   R3 = <<"<p>a">>, 
   {Out, [R1,R2,R3]} 
.... 
In some ways this is like PHP, only the sematics is "done right" with 
no unecessary side effect (which will make things nicely composable). 
/Joe Armstrong 


On Fri, Apr 10, 2009 at 2:15 AM,  <ll...@paisite.com> wrote: 
> Hi Joe, 
> Delighted that you've given this issue thought. 
> By composable, do you mean web pages that are build on reusable Erlang functions? 


I mean a web page is a represented as a pure function with no side effects. 
     pageName(InArgs) -> {OutArgs, HTML} 
If you call it a zillion times with the same InArgs it will return the same 
return value. This made testing and understanding what these functions do 
a lot easier than hiding side effect inside the functions. 
InArgs is some record (to be defined) containing the URI args, the "state of the 
session" is the user authenticated etc, possible database values. 
OutArgs will contain headers (to be sent to the web browser), the new state 
of the database etc. 
We can also write functions returning only HTML and call them as I suggested 
> Are these functions what you mean by "rounded corner black boxes?" 


Could be 
> If so, I'm with you on that. And keeping these functions side-effect free makes good sense based on arguments you've presented elsewhere. 
> As to definition of a web page, your third definition, "A pure function of an environment which contains headers, etc, and returns HTML and a new environment," rings the most bells for me. 
> But I have trouble with trying to put the whole web site into one file. Wouldn't it be great if we could. But as I've argued elsewhere in this thread we often have different "roles" involved in the creation of the site -- the programming role, the page content role, and the page design/styling role. Except for those renaissance type one-man-band site developers, each of these role players sees the work of the others as so much noise. 


Yes - it seems to me that shipping an application an "open" file structure 
breaks a basic principle of encapsulation. In my perfect world there would be 
a single directory "/apps". To install an application I'd drop a 
single file into "/apps" - that's it. To uninstall I delete the file - 
after uninstalling the system 
shoud be in the same state as it was prior to installing (with the exception of 
a log file, that said that I installed and unistalled, etc., possiblly 
some settings 
that I might want to use if I reinstall later) 
The point is a user shoudl not see the internal structure of an appliction - 
a *developer* should see the necessary parts of the structure, necessary for 
the the construction. File systems (by exposing everything) break basic 
principles of encapsulation (an object is a black box with a defined interface). 
Thus I do not like scaffolding generators - make a command and suddenly 
my disk is full of mysterious files, whoes contents is a mystery. 
Better would be that "make_app" creates a single file whies content is 
revealed through a defined interface (like a database, in fact) 
> I spent years developing in Cold Fusion, a proprietary predecessor of PHP which uses the same logic embedded in presentation style of development. Believe me, with more complex pages, particularly in the days prior to CSS, it was a bitch. 
> This, I think is the reason that many frameworks try to separate data from logic and logic from presentation. Yet, you're right, having all those pesky files to dig through can be a pain. 


I have no real preference here - since I see no differences between 
logic and presentation. presentation *is* (constant) logic 
Imagine a page like like this 
      <h1>hello</h1> 
      <? aFunctionWhichReturnsHTML(...) ?> 
      <p>hello 
I see this as a list of functions: 
      id("<h1>hello</h1>") 
      aFunctionWhichWhenReturnsHTML(...) 
      id("<p>hello") 
The id function just returns it's argument (id(X) -> X) 
Web pages with arguments are just lambda abractions 
     ie 
       <p>hello ${name} you are ${age} years old 
  *is* a lambda abstraction 
     fun(Name, Age) -> 
         ["<p>hello", Name, "you are", Age, "years old"] 
     end 
   Viewed this way there is no separation of logic and presentation - everything 
is logic :-) 
Another way of thinking might be to view a web page as a process 
containing named holes. 
To fill a hole you send the page a message 
     Page ! {fillHole, a, "<p>hello"} 
This fills the hole named "a" 
To read a hole you send the web page a message 
    Page ! {read, "a"} 
It sends back the content. 
JoePage would be a permanent process to which I could send messages 
(irrepective of whether the page is displayed or not) 
    JoePage ! {fillehole, "a", "hello"} 
would cause a permanent change to joepage (until the next message) - this 
way any database involved is abstracted away. We only have "persistent pages" 
and therefore there is no need of a database (we might *implement* this using 
a database - but knowing *how* this is implemented breaks (yet 
another) abstraction - we shouldn't need to know) we should only need 
to know 
"there are pages with names" and "we can change them by sending them 
messages according to some defined protocol" - how there are 
represented 
and stored is irrelevant. (They might in fact be represented in many 
different ways) 
What we are talking about is the purest form of objects - where 
objects are totally isolated and can only be influenced by message 
passing. 
In this case the web page *is* an object - the only way we can change 
it is by sending it a message. 
Must think more about this 
... perhapse we just need 
a cloan operation. There is a generic web page (say foo) from which we 
can cloan "joe's version of foo) 
Foo looks like this 
     <h1>hello <span id="name"></span></h1> 
     .... 
They I can create  cloan and sent it a message 
     JoesFoo = cloan("foo"), 
     JoesFoo ! {fillregion, "name", "joe"} 
This persistent - JoesFoo lives in a store it can be pulled out 
of the store and displayed 
I need to think about this more  ... this is just stream of consciousness ... 
Cheers 
/Joe 
] 
